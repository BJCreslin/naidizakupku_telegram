package com.naidizakupku.telegram.handler

import com.naidizakupku.telegram.service.UserCodeService
import com.naidizakupku.telegram.service.UserCodeResponse
import org.slf4j.LoggerFactory
import org.springframework.stereotype.Component
import org.telegram.telegrambots.meta.api.methods.send.SendMessage
import org.telegram.telegrambots.meta.api.objects.Update
import org.telegram.telegrambots.meta.api.objects.User

@Component
class TelegramCodeHandler(
    private val userCodeService: UserCodeService
) {
    
    companion object {
        private val logger = LoggerFactory.getLogger(TelegramCodeHandler::class.java)
    }
    
    fun handleCodeCommand(update: Update): SendMessage {
        val chatId = update.message.chatId.toString()
        val user = update.message.from
        
        try {
            logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /code –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}")
            
            val userCodeResponse = userCodeService.getOrCreateUserCode(
                telegramUserId = user.id,
                userTimezone = extractUserTimezone(user)
            )
            
            val message = buildCodeMessage(userCodeResponse)
            
            return SendMessage().apply {
                this.chatId = chatId
                this.text = message
                this.parseMode = "HTML"
            }
            
        } catch (e: Exception) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /code –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}", e)
            
            return SendMessage().apply {
                this.chatId = chatId
                this.text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            }
        }
    }
    
    private fun buildCodeMessage(response: UserCodeResponse): String {
        val statusIcon = if (response.isNew) "üÜï" else "üîë"
        val statusText = if (response.isNew) "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –∫–æ–¥" else "–í–∞—à –∫–æ–¥"
        
        val expirationTime = userCodeService.formatExpirationTime(response.expiresAt, response.timezone)
        
        return """
            $statusIcon <b>$statusText</b>: <code>${response.code}</code>
            ‚è∞ <b>–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ</b>: $expirationTime
        """.trimIndent()
    }
    
    private fun extractUserTimezone(user: User): String? {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º Telegram Bot API —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è UTC+3 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return null
    }
}
