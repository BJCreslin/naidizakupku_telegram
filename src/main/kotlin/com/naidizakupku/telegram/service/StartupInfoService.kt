package com.naidizakupku.telegram.service

import org.slf4j.LoggerFactory
import org.springframework.beans.factory.annotation.Value
import org.springframework.boot.context.event.ApplicationReadyEvent
import org.springframework.context.event.EventListener
import org.springframework.stereotype.Service

@Service
class StartupInfoService {
    
    private val logger = LoggerFactory.getLogger(StartupInfoService::class.java)
    
    @Value("\${spring.datasource.url:}")
    private lateinit var databaseUrl: String
    
    @Value("\${spring.datasource.username:}")
    private lateinit var databaseUsername: String
    
    @Value("\${spring.kafka.bootstrap-servers:}")
    private lateinit var kafkaBootstrapServers: String
    
    @Value("\${spring.kafka.properties.security.protocol:}")
    private lateinit var kafkaSecurityProtocol: String
    
    @Value("\${telegram.bot.name:}")
    private lateinit var telegramBotUsername: String
    
    @Value("\${telegram.bot.token:}")
    private lateinit var telegramBotToken: String
    
    @Value("\${spring.profiles.active:default}")
    private lateinit var activeProfile: String
    
    @Value("\${server.port:8080}")
    private var serverPort: Int = 8080
    
    @EventListener(ApplicationReadyEvent::class)
    fun logStartupInfo() {
        logger.info("=".repeat(60))
        logger.info("üöÄ –ü–†–ò–õ–û–ñ–ï–ù–ò–ï –ó–ê–ü–£–©–ï–ù–û")
        logger.info("=".repeat(60))
        
        // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        logger.info("üìã –ü–†–û–§–ò–õ–¨: $activeProfile")
        logger.info("üåê –ü–û–†–¢: $serverPort")
        
        // –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        logger.info("üóÑÔ∏è  –ë–ê–ó–ê –î–ê–ù–ù–´–•:")
        logger.info("   URL: $databaseUrl")
        logger.info("   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $databaseUsername")
        
        // Kafka
        logger.info("üì® KAFKA:")
        logger.info("   –°–µ—Ä–≤–µ—Ä—ã: ${maskSensitiveData(kafkaBootstrapServers)}")
        logger.info("   –ü—Ä–æ—Ç–æ–∫–æ–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: $kafkaSecurityProtocol")
        
        // Telegram Bot
        logger.info("ü§ñ TELEGRAM BOT:")
        logger.info("   Name: $telegramBotUsername")
        logger.info("   –¢–æ–∫–µ–Ω: ${maskSensitiveData(telegramBotToken)}")
        
        // –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        logger.info("üîå –°–¢–ê–¢–£–° –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô:")
        logConnectionStatus()
        
        logger.info("=".repeat(60))
    }
    
    private fun maskSensitiveData(data: String): String {
        return when {
            data.isEmpty() -> "–ù–ï –ù–ê–°–¢–†–û–ï–ù–û"
            data.contains("password") || data.contains("token") -> "***–°–ö–†–´–¢–û***"
            data.length > 50 -> "${data.take(20)}...${data.takeLast(10)}"
            else -> data
        }
    }
    
    private fun logConnectionStatus() {
        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
            logger.info("   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ‚úÖ –ì–û–¢–û–í–ê")
        } catch (e: Exception) {
            logger.error("   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ‚ùå –û–®–ò–ë–ö–ê: ${e.message}")
        }
        
        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Kafka
            if (kafkaBootstrapServers.isNotEmpty()) {
                logger.info("   Kafka: ‚úÖ –ì–û–¢–û–í–ê")
            } else {
                logger.info("   Kafka: ‚ö†Ô∏è  –ù–ï –ù–ê–°–¢–†–û–ï–ù–û")
            }
        } catch (e: Exception) {
            logger.error("   Kafka: ‚ùå –û–®–ò–ë–ö–ê: ${e.message}")
        }
        
        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram Bot
            if (telegramBotToken.isNotEmpty() && telegramBotUsername.isNotEmpty()) {
                logger.info("   Telegram Bot: ‚úÖ –ì–û–¢–û–í")
            } else {
                logger.info("   Telegram Bot: ‚ö†Ô∏è  –ù–ï –ù–ê–°–¢–†–û–ï–ù")
            }
        } catch (e: Exception) {
            logger.error("   Telegram Bot: ‚ùå –û–®–ò–ë–ö–ê: ${e.message}")
        }
    }
}
