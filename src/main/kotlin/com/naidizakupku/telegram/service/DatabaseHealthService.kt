package com.naidizakupku.telegram.service

import org.slf4j.LoggerFactory
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.jdbc.core.JdbcTemplate
import org.springframework.stereotype.Service
import javax.sql.DataSource

@Service
class DatabaseHealthService {
    
    private val logger = LoggerFactory.getLogger(DatabaseHealthService::class.java)
    
    @Autowired
    private lateinit var dataSource: DataSource
    
    @Autowired
    private lateinit var jdbcTemplate: JdbcTemplate
    
    fun checkDatabaseConnection(): Boolean {
        return try {
            val connection = dataSource.connection
            val isValid = connection.isValid(5)
            connection.close()
            
            if (isValid) {
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ")
                checkTables()
                true
            } else {
                logger.error("‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ")
                false
            }
        } catch (e: Exception) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: ${e.message}")
            false
        }
    }
    
    private fun checkTables() {
        try {
            val tables = jdbcTemplate.queryForList(
                "SELECT table_name FROM information_schema.tables WHERE table_schema = 'public'",
                String::class.java
            )
            
            logger.info("üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã: ${tables.joinToString(", ")}")
            
            if (tables.contains("users")) {
                val userCount = jdbcTemplate.queryForObject("SELECT COUNT(*) FROM users", Long::class.java)
                logger.info("üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: $userCount")
            } else {
                logger.warn("‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ 'users' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É Liquibase
            if (tables.contains("databasechangelog")) {
                val changeCount = jdbcTemplate.queryForObject("SELECT COUNT(*) FROM databasechangelog", Long::class.java)
                logger.info("üîÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π Liquibase: $changeCount")
            } else {
                logger.warn("‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ 'databasechangelog' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            }
            
        } catch (e: Exception) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü: ${e.message}")
        }
    }
}
