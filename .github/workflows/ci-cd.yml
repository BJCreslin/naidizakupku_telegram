name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  packages: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          
      - name: Make gradlew executable
        run: chmod +x ./gradlew
        
      - name: Check architecture documentation
        run: |
          if [ ! -f "ARCHITECTURE.md" ]; then
            echo "❌ ARCHITECTURE.md file is missing!"
            exit 1
          fi
          echo "✅ ARCHITECTURE.md file exists"
          
          # Проверяем синтаксис Markdown
          if command -v markdownlint >/dev/null 2>&1; then
            markdownlint ARCHITECTURE.md ARCHITECTURE_RULES.md
          else
            echo "⚠️  markdownlint not available, skipping syntax check"
          fi
        
      - name: Run tests
        run: ./gradlew test
        
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: build/test-results/
          retention-days: 7

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          
      - name: Make gradlew executable
        run: chmod +x ./gradlew
        
      - name: Build application
        run: ./gradlew clean build -x test
        
      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: application-jar
          path: build/libs/*.jar
          retention-days: 7

  docker-build:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    env:
      DOCKER_IMAGE: ghcr.io/bjcreslin/naidizakupku-telegram
      DOCKER_TAG: ${{ github.sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
            ${{ env.DOCKER_IMAGE }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main'
    environment: production
    env:
      DOCKER_IMAGE: ghcr.io/bjcreslin/naidizakupku-telegram
      DOCKER_TAG: ${{ github.sha }}
      GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
      POSTGRES_URL: ${{ secrets.POSTGRES_URL }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      KAFKA_BOOTSTRAP_SERVERS: ${{ secrets.KAFKA_BOOTSTRAP_SERVERS }}
      KAFKA_USER: ${{ secrets.KAFKA_USER }}
      KAFKA_PASSWORD: ${{ secrets.KAFKA_PASSWORD }}
    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_KEY }}
          envs: DOCKER_IMAGE,DOCKER_TAG,GHCR_TOKEN,POSTGRES_URL,POSTGRES_USER,POSTGRES_PASSWORD,TELEGRAM_BOT_TOKEN,TELEGRAM_BOT_NAME,KAFKA_BOOTSTRAP_SERVERS,KAFKA_USER,KAFKA_PASSWORD
          script: |
            env | sort
            # Останавливаю старый контейнер
            docker stop telegram-app || true
            docker rm telegram-app || true
            
            # Удаляю старый образ
            docker rmi $DOCKER_IMAGE:latest || true
            
            # Авторизуюсь в GitHub Container Registry
            echo  "${{ secrets.GHCR_TOKEN }}" | docker login -u '${{ github.actor }}' --password-stdin ghcr.io
            
            # Скачиваю новый образ
            docker pull $DOCKER_IMAGE:$DOCKER_TAG
            docker tag $DOCKER_IMAGE:$DOCKER_TAG $DOCKER_IMAGE:latest
                   
            
            # Запускаю новый контейнер с правильным подключением к локальной БД
             docker run -d \
               --add-host=host.docker.internal:host-gateway \
               --name telegram-app \
               --restart unless-stopped \
               -p 8080:8080 \
               -e TELEGRAM_BOT_TOKEN="${{ secrets.TELEGRAM_BOT_TOKEN }}" \
               -e TELEGRAM_BOT_NAME="${{ secrets.TELEGRAM_BOT_NAME }}" \
               -e POSTGRES_URL="$POSTGRES_URL" \
               -e POSTGRES_USER="$POSTGRES_USER" \
               -e POSTGRES_PASSWORD="$POSTGRES_PASSWORD" \
               -e KAFKA_BOOTSTRAP_SERVERS="${{ secrets.KAFKA_BOOTSTRAP_SERVERS }}" \
               -e KAFKA_USER="${{ secrets.KAFKA_USER }}" \
               -e KAFKA_PASSWORD="${{ secrets.KAFKA_PASSWORD }}" \
               -v /opt/telegram-app/logs:/app/logs \
               $DOCKER_IMAGE:latest
            
            # Ждем запуска приложения
            echo "Waiting for application to start..."
            sleep 60
            
            # Проверяем статус контейнера
            echo "Container status:"
            docker ps -a | grep telegram-app || echo "Container not found"
            
            # Проверяем логи контейнера
            echo "Container logs:"
            docker logs telegram-app || echo "No logs available yet"
            
            # Проверяем здоровье приложения
            echo "Checking application health..."
            for i in {1..10}; do
                if curl -f http://localhost:8080/actuator/health > /dev/null 2>&1; then
                    echo "Application is healthy!"
                    break
                else
                    echo "Health check attempt $i failed, waiting..."
                    sleep 10
                fi
                
                if [ $i -eq 10 ]; then
                    echo "Application failed to start properly!"
                    exit 1
                fi
            done
            
            echo 'Деплой завершен успешно'
