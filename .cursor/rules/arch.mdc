---
alwaysApply: true
---
# Правила поддержания документации архитектуры

## Общие принципы

### 1. Обязательность обновления
- **ПРАВИЛО**: При любом изменении архитектуры приложения (добавление/удаление/изменение классов, слоев, зависимостей) ОБЯЗАТЕЛЬНО обновлять `ARCHITECTURE.md`
- **ПРАВИЛО**: Изменения в `ARCHITECTURE.md` должны быть частью того же коммита, что и код

### 2. Структура документации
- **ПРАВИЛО**: Каждый новый класс/компонент должен быть описан в соответствующем разделе
- **ПРАВИЛО**: При удалении класса/компонента - удалять его описание из документации
- **ПРАВИЛО**: При изменении назначения класса - обновлять его описание

## Конкретные правила по слоям

### Controller Layer
- **ПРАВИЛО**: При создании нового контроллера добавить его в раздел "Controller Layer" с описанием назначения
- **ПРАВИЛО**: При добавлении новых endpoints описать их в разделе "Поток данных"

### Service Layer
- **ПРАВИЛО**: При создании нового сервиса добавить его в раздел "Service Layer" с кратким описанием бизнес-логики
- **ПРАВИЛО**: При изменении взаимодействия между сервисами обновить схему потока данных

### Repository Layer
- **ПРАВИЛО**: При создании нового репозитория добавить его в раздел "Repository Layer"
- **ПРАВИЛО**: При изменении структуры данных обновить раздел "Структура базы данных"

### Domain Layer
- **ПРАВИЛО**: При создании новой сущности добавить её в раздел "Domain Layer"
- **ПРАВИЛО**: При изменении полей сущности обновить описание в "Структура базы данных"

### Config Layer
- **ПРАВИЛО**: При добавлении новой конфигурации добавить её в раздел "Config Layer"
- **ПРАВИЛО**: При изменении настроек обновить раздел "Конфигурация"

## Правила для технологического стека

### Зависимости
- **ПРАВИЛО**: При изменении версий в `build.gradle.kts` обновить раздел "Технологический стек"
- **ПРАВИЛО**: При добавлении/удалении зависимостей обновить соответствующие разделы

### База данных
- **ПРАВИЛО**: При создании новых миграций Liquibase обновить раздел "Структура базы данных"
- **ПРАВИЛО**: При изменении схемы БД обновить описание таблиц

### Kafka
- **ПРАВИЛО**: При добавлении новых топиков добавить их в раздел "Kafka Topics"
- **ПРАВИЛО**: При изменении структуры сообщений обновить описание топиков

## Правила для CI/CD и развертывания

### Конфигурация
- **ПРАВИЛО**: При добавлении новых переменных окружения добавить их в раздел "Переменные окружения"
- **ПРАВИЛО**: При изменении Docker конфигурации обновить раздел "Развертывание"

### Мониторинг
- **ПРАВИЛО**: При добавлении новых метрик/логов обновить раздел "Мониторинг и логирование"

## Процесс проверки

### Перед коммитом
1. Проверить, что все изменения архитектуры отражены в `ARCHITECTURE.md`
2. Убедиться, что описания соответствуют реальному коду
3. Проверить актуальность схем и диаграмм

### При code review
1. Проверить соответствие изменений в коде и документации
2. Убедиться в полноте описания новых компонентов
3. Проверить актуальность потока данных

## Автоматизация

### GitHub Actions
- **ПРАВИЛО**: Добавить проверку наличия файла `ARCHITECTURE.md` в CI/CD pipeline
- **ПРАВИЛО**: Добавить проверку синтаксиса Markdown

### Pre-commit hooks
- **ПРАВИЛО**: Настроить pre-commit hook для проверки изменений в `ARCHITECTURE.md`
- **ПРАВИЛО**: Добавить проверку ссылок на классы в документации

## Шаблоны описания

### Для нового класса
```markdown
### ИмяКласса
**Назначение**: Краткое описание назначения класса
**Основные методы**:
- `method1()` - описание метода
- `method2()` - описание метода
```

### Для новой сущности БД
```markdown
### Таблица `table_name`
- `field1` (TYPE, CONSTRAINTS) - описание поля
- `field2` (TYPE, CONSTRAINTS) - описание поля
```

### Для нового Kafka топика
```markdown
- `topic.name` - описание назначения топика и структуры сообщений
```

## Ответственность

- **Разработчики**: Обязаны обновлять документацию при изменении кода
- **Tech Lead**: Проверяет полноту и актуальность документации
- **DevOps**: Обновляет разделы по развертыванию и мониторингу

